(require "asdf")
(push "C:/Users/romro/Documents/M1/info806/Projet/chessParser/" asdf:*central-registry*)
(push "C:/Users/romro/Documents/M1/info806/Projet/named-readtables-master/" asdf:*central-registry*)
(push "C:/Users/romro/Documents/M1/info806/Projet/anaphora-master/" asdf:*central-registry*)
(push "C:/Users/romro/Documents/M1/info806/Projet/alexandria-master/" asdf:*central-registry*)
(push "C:/Users/romro/Documents/M1/info806/Projet/cl-ppcre-master/" asdf:*central-registry*)
(push "C:/Users/romro/Documents/M1/info806/Projet/cl-unicode-master/" asdf:*central-registry*)
(push "C:/Users/romro/Documents/M1/info806/Projet/flexi-streams-1.0.19/" asdf:*central-registry*)
(push "C:/Users/romro/Documents/M1/info806/Projet/trivial-gray-streams-master/" asdf:*central-registry*)
(asdf:load-system "queen")
(format t "~A~%" (truename *default-pathname-defaults*))


(defun get-file (filename)
  (with-open-file (stream filename)
    (let ((lines ()))
    (loop for line = (read-line stream nil)
          while line do
          (push line lines))
    (reverse lines))
    )
  )

(defvar ld '(""))
(defun concatMid (ls)
  (dolist (l ls)
    (cond
     ((string= (car ld) "") (setq ld (cons (concatenate 'string (car ld) (cond ((string= (car ld) "") "") (T "~%~%")) l) (cdr ld))))
     (T (setq ld (cons (concatenate 'string (car ld) (cond ((string= (car ld) "") "") (T "~%~%")) l) (cdr ld))) (setq ld (cons "" ld)))
     )
)
  (reverse (cdr ld))
)

(defvar tabGames '(""))
(defun concatGames (gamelines)
  (dolist (l gamelines)
    (cond
     ((string= l "") (setq tabGames (cons "" tabGames)))
     (T (setq tabGames (cons (concatenate 'string (car tabGames) (cond ((string= (car tabGames) "") "") (T "~%")) l) (cdr tabGames))))
     )
   )
  (concatMid (reverse tabGames))
)

(defun loadGamesFromPGN (pgnPath)
  (concatGames (get-file pgnPath))
  )